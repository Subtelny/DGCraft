/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.core.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.core.generated.Indexes;
import pl.subtelny.core.generated.Keys;
import pl.subtelny.core.generated.Public;
import pl.subtelny.core.generated.enums.Islandtype;
import pl.subtelny.core.generated.tables.records.IslandsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Islands extends TableImpl<IslandsRecord> {

    private static final long serialVersionUID = -1994915161;

    /**
     * The reference instance of <code>public.islands</code>
     */
    public static final Islands ISLANDS = new Islands();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IslandsRecord> getRecordType() {
        return IslandsRecord.class;
    }

    /**
     * The column <code>public.islands.id</code>.
     */
    public final TableField<IslandsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('islands_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.islands.created_date</code>.
     */
    public final TableField<IslandsRecord, Timestamp> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.islands.spawn</code>.
     */
    public final TableField<IslandsRecord, String> SPAWN = createField(DSL.name("spawn"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.islands.type</code>.
     */
    public final TableField<IslandsRecord, Islandtype> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(pl.subtelny.core.generated.enums.Islandtype.class), this, "");

    /**
     * Create a <code>public.islands</code> table reference
     */
    public Islands() {
        this(DSL.name("islands"), null);
    }

    /**
     * Create an aliased <code>public.islands</code> table reference
     */
    public Islands(String alias) {
        this(DSL.name(alias), ISLANDS);
    }

    /**
     * Create an aliased <code>public.islands</code> table reference
     */
    public Islands(Name alias) {
        this(alias, ISLANDS);
    }

    private Islands(Name alias, Table<IslandsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Islands(Name alias, Table<IslandsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Islands(Table<O> child, ForeignKey<O, IslandsRecord> key) {
        super(child, key, ISLANDS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISLANDS_PKEY);
    }

    @Override
    public Identity<IslandsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ISLANDS;
    }

    @Override
    public UniqueKey<IslandsRecord> getPrimaryKey() {
        return Keys.ISLANDS_PKEY;
    }

    @Override
    public List<UniqueKey<IslandsRecord>> getKeys() {
        return Arrays.<UniqueKey<IslandsRecord>>asList(Keys.ISLANDS_PKEY);
    }

    @Override
    public Islands as(String alias) {
        return new Islands(DSL.name(alias), this);
    }

    @Override
    public Islands as(Name alias) {
        return new Islands(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Islands rename(String name) {
        return new Islands(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Islands rename(Name name) {
        return new Islands(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Timestamp, String, Islandtype> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
