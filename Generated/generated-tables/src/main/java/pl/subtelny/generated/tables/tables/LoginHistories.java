/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.generated.tables.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.generated.tables.Indexes;
import pl.subtelny.generated.tables.Keys;
import pl.subtelny.generated.tables.Public;
import pl.subtelny.generated.tables.tables.records.LoginHistoriesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LoginHistories extends TableImpl<LoginHistoriesRecord> {

    private static final long serialVersionUID = -1998843714;

    /**
     * The reference instance of <code>public.login_histories</code>
     */
    public static final LoginHistories LOGIN_HISTORIES = new LoginHistories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoginHistoriesRecord> getRecordType() {
        return LoginHistoriesRecord.class;
    }

    /**
     * The column <code>public.login_histories.id</code>.
     */
    public final TableField<LoginHistoriesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('login_histories_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.login_histories.login_time</code>.
     */
    public final TableField<LoginHistoriesRecord, Timestamp> LOGIN_TIME = createField(DSL.name("login_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.login_histories.logout_time</code>.
     */
    public final TableField<LoginHistoriesRecord, Timestamp> LOGOUT_TIME = createField(DSL.name("logout_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.login_histories.account</code>.
     */
    public final TableField<LoginHistoriesRecord, UUID> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.login_histories</code> table reference
     */
    public LoginHistories() {
        this(DSL.name("login_histories"), null);
    }

    /**
     * Create an aliased <code>public.login_histories</code> table reference
     */
    public LoginHistories(String alias) {
        this(DSL.name(alias), LOGIN_HISTORIES);
    }

    /**
     * Create an aliased <code>public.login_histories</code> table reference
     */
    public LoginHistories(Name alias) {
        this(alias, LOGIN_HISTORIES);
    }

    private LoginHistories(Name alias, Table<LoginHistoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private LoginHistories(Name alias, Table<LoginHistoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LoginHistories(Table<O> child, ForeignKey<O, LoginHistoriesRecord> key) {
        super(child, key, LOGIN_HISTORIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOGIN_HISTORIES_PKEY);
    }

    @Override
    public Identity<LoginHistoriesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOGIN_HISTORIES;
    }

    @Override
    public UniqueKey<LoginHistoriesRecord> getPrimaryKey() {
        return Keys.LOGIN_HISTORIES_PKEY;
    }

    @Override
    public List<UniqueKey<LoginHistoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<LoginHistoriesRecord>>asList(Keys.LOGIN_HISTORIES_PKEY);
    }

    @Override
    public List<ForeignKey<LoginHistoriesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LoginHistoriesRecord, ?>>asList(Keys.LOGIN_HISTORIES__LOGIN_HISTORIES_ACCOUNT_FKEY);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.LOGIN_HISTORIES__LOGIN_HISTORIES_ACCOUNT_FKEY);
    }

    @Override
    public LoginHistories as(String alias) {
        return new LoginHistories(DSL.name(alias), this);
    }

    @Override
    public LoginHistories as(Name alias) {
        return new LoginHistories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LoginHistories rename(String name) {
        return new LoginHistories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LoginHistories rename(Name name) {
        return new LoginHistories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Timestamp, Timestamp, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
