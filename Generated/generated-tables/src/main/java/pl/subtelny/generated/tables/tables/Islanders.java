/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.generated.tables.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.generated.tables.Indexes;
import pl.subtelny.generated.tables.Keys;
import pl.subtelny.generated.tables.Public;
import pl.subtelny.generated.tables.tables.records.IslandersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Islanders extends TableImpl<IslandersRecord> {

    private static final long serialVersionUID = 373774244;

    /**
     * The reference instance of <code>public.islanders</code>
     */
    public static final Islanders ISLANDERS = new Islanders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IslandersRecord> getRecordType() {
        return IslandersRecord.class;
    }

    /**
     * The column <code>public.islanders.id</code>.
     */
    public final TableField<IslandersRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.islanders</code> table reference
     */
    public Islanders() {
        this(DSL.name("islanders"), null);
    }

    /**
     * Create an aliased <code>public.islanders</code> table reference
     */
    public Islanders(String alias) {
        this(DSL.name(alias), ISLANDERS);
    }

    /**
     * Create an aliased <code>public.islanders</code> table reference
     */
    public Islanders(Name alias) {
        this(alias, ISLANDERS);
    }

    private Islanders(Name alias, Table<IslandersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Islanders(Name alias, Table<IslandersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Islanders(Table<O> child, ForeignKey<O, IslandersRecord> key) {
        super(child, key, ISLANDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISLANDERS_ID_PK);
    }

    @Override
    public UniqueKey<IslandersRecord> getPrimaryKey() {
        return Keys.ISLANDERS_ID_PK;
    }

    @Override
    public List<UniqueKey<IslandersRecord>> getKeys() {
        return Arrays.<UniqueKey<IslandersRecord>>asList(Keys.ISLANDERS_ID_PK);
    }

    @Override
    public List<ForeignKey<IslandersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IslandersRecord, ?>>asList(Keys.ISLANDERS__ISLANDERS_ID_FOREIGN);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ISLANDERS__ISLANDERS_ID_FOREIGN);
    }

    @Override
    public Islanders as(String alias) {
        return new Islanders(DSL.name(alias), this);
    }

    @Override
    public Islanders as(Name alias) {
        return new Islanders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Islanders rename(String name) {
        return new Islanders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Islanders rename(Name name) {
        return new Islanders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<UUID> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
