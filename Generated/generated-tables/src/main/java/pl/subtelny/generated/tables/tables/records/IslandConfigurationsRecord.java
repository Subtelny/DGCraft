/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.generated.tables.tables.records;


import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import pl.subtelny.generated.tables.tables.IslandConfigurations;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IslandConfigurationsRecord extends UpdatableRecordImpl<IslandConfigurationsRecord> implements Record2<Integer, JSON> {

    private static final long serialVersionUID = 1188894233;

    /**
     * Setter for <code>public.island_configurations.island_id</code>.
     */
    public void setIslandId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.island_configurations.island_id</code>.
     */
    public Integer getIslandId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.island_configurations.configuration</code>.
     */
    public void setConfiguration(JSON value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.island_configurations.configuration</code>.
     */
    public JSON getConfiguration() {
        return (JSON) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, JSON> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, JSON> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return IslandConfigurations.ISLAND_CONFIGURATIONS.ISLAND_ID;
    }

    @Override
    public Field<JSON> field2() {
        return IslandConfigurations.ISLAND_CONFIGURATIONS.CONFIGURATION;
    }

    @Override
    public Integer component1() {
        return getIslandId();
    }

    @Override
    public JSON component2() {
        return getConfiguration();
    }

    @Override
    public Integer value1() {
        return getIslandId();
    }

    @Override
    public JSON value2() {
        return getConfiguration();
    }

    @Override
    public IslandConfigurationsRecord value1(Integer value) {
        setIslandId(value);
        return this;
    }

    @Override
    public IslandConfigurationsRecord value2(JSON value) {
        setConfiguration(value);
        return this;
    }

    @Override
    public IslandConfigurationsRecord values(Integer value1, JSON value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IslandConfigurationsRecord
     */
    public IslandConfigurationsRecord() {
        super(IslandConfigurations.ISLAND_CONFIGURATIONS);
    }

    /**
     * Create a detached, initialised IslandConfigurationsRecord
     */
    public IslandConfigurationsRecord(Integer islandId, JSON configuration) {
        super(IslandConfigurations.ISLAND_CONFIGURATIONS);

        set(0, islandId);
        set(1, configuration);
    }
}
