/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.generated.tables.tables.records;


import java.sql.Timestamp;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import pl.subtelny.generated.tables.tables.Islands;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IslandsRecord extends UpdatableRecordImpl<IslandsRecord> implements Record4<Integer, String, Timestamp, Integer> {

    private static final long serialVersionUID = -1841610538;

    /**
     * Setter for <code>public.islands.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.islands.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.islands.spawn</code>.
     */
    public void setSpawn(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.islands.spawn</code>.
     */
    public String getSpawn() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.islands.created_date</code>.
     */
    public void setCreatedDate(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.islands.created_date</code>.
     */
    public Timestamp getCreatedDate() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>public.islands.points</code>.
     */
    public void setPoints(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.islands.points</code>.
     */
    public Integer getPoints() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Timestamp, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Timestamp, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Islands.ISLANDS.ID;
    }

    @Override
    public Field<String> field2() {
        return Islands.ISLANDS.SPAWN;
    }

    @Override
    public Field<Timestamp> field3() {
        return Islands.ISLANDS.CREATED_DATE;
    }

    @Override
    public Field<Integer> field4() {
        return Islands.ISLANDS.POINTS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getSpawn();
    }

    @Override
    public Timestamp component3() {
        return getCreatedDate();
    }

    @Override
    public Integer component4() {
        return getPoints();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getSpawn();
    }

    @Override
    public Timestamp value3() {
        return getCreatedDate();
    }

    @Override
    public Integer value4() {
        return getPoints();
    }

    @Override
    public IslandsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public IslandsRecord value2(String value) {
        setSpawn(value);
        return this;
    }

    @Override
    public IslandsRecord value3(Timestamp value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public IslandsRecord value4(Integer value) {
        setPoints(value);
        return this;
    }

    @Override
    public IslandsRecord values(Integer value1, String value2, Timestamp value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IslandsRecord
     */
    public IslandsRecord() {
        super(Islands.ISLANDS);
    }

    /**
     * Create a detached, initialised IslandsRecord
     */
    public IslandsRecord(Integer id, String spawn, Timestamp createdDate, Integer points) {
        super(Islands.ISLANDS);

        set(0, id);
        set(1, spawn);
        set(2, createdDate);
        set(3, points);
    }
}
