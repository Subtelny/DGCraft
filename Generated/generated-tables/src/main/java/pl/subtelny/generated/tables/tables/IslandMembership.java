/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.generated.tables.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.generated.tables.Indexes;
import pl.subtelny.generated.tables.Keys;
import pl.subtelny.generated.tables.Public;
import pl.subtelny.generated.tables.tables.records.IslandMembershipRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IslandMembership extends TableImpl<IslandMembershipRecord> {

    private static final long serialVersionUID = 1344630109;

    /**
     * The reference instance of <code>public.island_membership</code>
     */
    public static final IslandMembership ISLAND_MEMBERSHIP = new IslandMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IslandMembershipRecord> getRecordType() {
        return IslandMembershipRecord.class;
    }

    /**
     * The column <code>public.island_membership.island_member_id</code>.
     */
    public final TableField<IslandMembershipRecord, String> ISLAND_MEMBER_ID = createField(DSL.name("island_member_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.island_membership.island_id</code>.
     */
    public final TableField<IslandMembershipRecord, Integer> ISLAND_ID = createField(DSL.name("island_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.island_membership.rank</code>.
     */
    public final TableField<IslandMembershipRecord, String> RANK = createField(DSL.name("rank"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>public.island_membership</code> table reference
     */
    public IslandMembership() {
        this(DSL.name("island_membership"), null);
    }

    /**
     * Create an aliased <code>public.island_membership</code> table reference
     */
    public IslandMembership(String alias) {
        this(DSL.name(alias), ISLAND_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>public.island_membership</code> table reference
     */
    public IslandMembership(Name alias) {
        this(alias, ISLAND_MEMBERSHIP);
    }

    private IslandMembership(Name alias, Table<IslandMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private IslandMembership(Name alias, Table<IslandMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> IslandMembership(Table<O> child, ForeignKey<O, IslandMembershipRecord> key) {
        super(child, key, ISLAND_MEMBERSHIP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMBERSHIP_ISLAND_ISLAND_PK);
    }

    @Override
    public UniqueKey<IslandMembershipRecord> getPrimaryKey() {
        return Keys.MEMBERSHIP_ISLAND_ISLAND_PK;
    }

    @Override
    public List<UniqueKey<IslandMembershipRecord>> getKeys() {
        return Arrays.<UniqueKey<IslandMembershipRecord>>asList(Keys.MEMBERSHIP_ISLAND_ISLAND_PK);
    }

    @Override
    public List<ForeignKey<IslandMembershipRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IslandMembershipRecord, ?>>asList(Keys.ISLAND_MEMBERSHIP__MEMBERSHIP_ISLAND_ISLAND_FK);
    }

    public Islands islands() {
        return new Islands(this, Keys.ISLAND_MEMBERSHIP__MEMBERSHIP_ISLAND_ISLAND_FK);
    }

    @Override
    public IslandMembership as(String alias) {
        return new IslandMembership(DSL.name(alias), this);
    }

    @Override
    public IslandMembership as(Name alias) {
        return new IslandMembership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IslandMembership rename(String name) {
        return new IslandMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IslandMembership rename(Name name) {
        return new IslandMembership(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
