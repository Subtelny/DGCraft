/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.generated.tables.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.generated.tables.Indexes;
import pl.subtelny.generated.tables.Keys;
import pl.subtelny.generated.tables.Public;
import pl.subtelny.generated.tables.enums.Membershiptype;
import pl.subtelny.generated.tables.tables.records.IslandsMembershipRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IslandsMembership extends TableImpl<IslandsMembershipRecord> {

    private static final long serialVersionUID = 125053443;

    /**
     * The reference instance of <code>public.islands_membership</code>
     */
    public static final IslandsMembership ISLANDS_MEMBERSHIP = new IslandsMembership();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IslandsMembershipRecord> getRecordType() {
        return IslandsMembershipRecord.class;
    }

    /**
     * The column <code>public.islands_membership.islander_id</code>.
     */
    public final TableField<IslandsMembershipRecord, UUID> ISLANDER_ID = createField(DSL.name("islander_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.islands_membership.island_id</code>.
     */
    public final TableField<IslandsMembershipRecord, Integer> ISLAND_ID = createField(DSL.name("island_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.islands_membership.membership_type</code>.
     */
    public final TableField<IslandsMembershipRecord, Membershiptype> MEMBERSHIP_TYPE = createField(DSL.name("membership_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(pl.subtelny.generated.tables.enums.Membershiptype.class), this, "");

    /**
     * Create a <code>public.islands_membership</code> table reference
     */
    public IslandsMembership() {
        this(DSL.name("islands_membership"), null);
    }

    /**
     * Create an aliased <code>public.islands_membership</code> table reference
     */
    public IslandsMembership(String alias) {
        this(DSL.name(alias), ISLANDS_MEMBERSHIP);
    }

    /**
     * Create an aliased <code>public.islands_membership</code> table reference
     */
    public IslandsMembership(Name alias) {
        this(alias, ISLANDS_MEMBERSHIP);
    }

    private IslandsMembership(Name alias, Table<IslandsMembershipRecord> aliased) {
        this(alias, aliased, null);
    }

    private IslandsMembership(Name alias, Table<IslandsMembershipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> IslandsMembership(Table<O> child, ForeignKey<O, IslandsMembershipRecord> key) {
        super(child, key, ISLANDS_MEMBERSHIP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISLANDS_MEMBERSHIP_PKEY);
    }

    @Override
    public UniqueKey<IslandsMembershipRecord> getPrimaryKey() {
        return Keys.ISLANDS_MEMBERSHIP_PKEY;
    }

    @Override
    public List<UniqueKey<IslandsMembershipRecord>> getKeys() {
        return Arrays.<UniqueKey<IslandsMembershipRecord>>asList(Keys.ISLANDS_MEMBERSHIP_PKEY);
    }

    @Override
    public List<ForeignKey<IslandsMembershipRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IslandsMembershipRecord, ?>>asList(Keys.ISLANDS_MEMBERSHIP__ISLANDS_MEMBERSHIP_ISLANDER_ID_FKEY, Keys.ISLANDS_MEMBERSHIP__ISLANDS_MEMBERSHIP_ISLAND_ID_FKEY);
    }

    public Islanders islanders() {
        return new Islanders(this, Keys.ISLANDS_MEMBERSHIP__ISLANDS_MEMBERSHIP_ISLANDER_ID_FKEY);
    }

    public Islands islands() {
        return new Islands(this, Keys.ISLANDS_MEMBERSHIP__ISLANDS_MEMBERSHIP_ISLAND_ID_FKEY);
    }

    @Override
    public IslandsMembership as(String alias) {
        return new IslandsMembership(DSL.name(alias), this);
    }

    @Override
    public IslandsMembership as(Name alias) {
        return new IslandsMembership(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IslandsMembership rename(String name) {
        return new IslandsMembership(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IslandsMembership rename(Name name) {
        return new IslandsMembership(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Integer, Membershiptype> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
