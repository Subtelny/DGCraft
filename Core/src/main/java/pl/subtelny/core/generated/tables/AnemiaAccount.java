/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.core.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.core.generated.Indexes;
import pl.subtelny.core.generated.Keys;
import pl.subtelny.core.generated.Public;
import pl.subtelny.core.generated.tables.records.AnemiaAccountRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnemiaAccount extends TableImpl<AnemiaAccountRecord> {

    private static final long serialVersionUID = -799762221;

    /**
     * The reference instance of <code>public.anemia_account</code>
     */
    public static final AnemiaAccount ANEMIA_ACCOUNT = new AnemiaAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnemiaAccountRecord> getRecordType() {
        return AnemiaAccountRecord.class;
    }

    /**
     * The column <code>public.anemia_account.uuid</code>.
     */
    public final TableField<AnemiaAccountRecord, UUID> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.anemia_account.nickname</code>.
     */
    public final TableField<AnemiaAccountRecord, String> NICKNAME = createField(DSL.name("nickname"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.anemia_account</code> table reference
     */
    public AnemiaAccount() {
        this(DSL.name("anemia_account"), null);
    }

    /**
     * Create an aliased <code>public.anemia_account</code> table reference
     */
    public AnemiaAccount(String alias) {
        this(DSL.name(alias), ANEMIA_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.anemia_account</code> table reference
     */
    public AnemiaAccount(Name alias) {
        this(alias, ANEMIA_ACCOUNT);
    }

    private AnemiaAccount(Name alias, Table<AnemiaAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnemiaAccount(Name alias, Table<AnemiaAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AnemiaAccount(Table<O> child, ForeignKey<O, AnemiaAccountRecord> key) {
        super(child, key, ANEMIA_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTITY_ACCOUNT_PKEY);
    }

    @Override
    public UniqueKey<AnemiaAccountRecord> getPrimaryKey() {
        return Keys.ENTITY_ACCOUNT_PKEY;
    }

    @Override
    public List<UniqueKey<AnemiaAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AnemiaAccountRecord>>asList(Keys.ENTITY_ACCOUNT_PKEY);
    }

    @Override
    public AnemiaAccount as(String alias) {
        return new AnemiaAccount(DSL.name(alias), this);
    }

    @Override
    public AnemiaAccount as(Name alias) {
        return new AnemiaAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnemiaAccount rename(String name) {
        return new AnemiaAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnemiaAccount rename(Name name) {
        return new AnemiaAccount(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
