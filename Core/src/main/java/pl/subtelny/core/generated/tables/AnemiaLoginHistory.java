/*
 * This file is generated by jOOQ.
 */
package pl.subtelny.core.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.subtelny.core.generated.Indexes;
import pl.subtelny.core.generated.Keys;
import pl.subtelny.core.generated.Public;
import pl.subtelny.core.generated.tables.records.AnemiaLoginHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnemiaLoginHistory extends TableImpl<AnemiaLoginHistoryRecord> {

    private static final long serialVersionUID = 455863704;

    /**
     * The reference instance of <code>public.anemia_login_history</code>
     */
    public static final AnemiaLoginHistory ANEMIA_LOGIN_HISTORY = new AnemiaLoginHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnemiaLoginHistoryRecord> getRecordType() {
        return AnemiaLoginHistoryRecord.class;
    }

    /**
     * The column <code>public.anemia_login_history.id</code>.
     */
    public final TableField<AnemiaLoginHistoryRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('anemia_login_history_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.anemia_login_history.start_date</code>.
     */
    public final TableField<AnemiaLoginHistoryRecord, Timestamp> START_DATE = createField(DSL.name("start_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.anemia_login_history.end_date</code>.
     */
    public final TableField<AnemiaLoginHistoryRecord, Timestamp> END_DATE = createField(DSL.name("end_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.anemia_login_history.account</code>.
     */
    public final TableField<AnemiaLoginHistoryRecord, UUID> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.anemia_login_history</code> table reference
     */
    public AnemiaLoginHistory() {
        this(DSL.name("anemia_login_history"), null);
    }

    /**
     * Create an aliased <code>public.anemia_login_history</code> table reference
     */
    public AnemiaLoginHistory(String alias) {
        this(DSL.name(alias), ANEMIA_LOGIN_HISTORY);
    }

    /**
     * Create an aliased <code>public.anemia_login_history</code> table reference
     */
    public AnemiaLoginHistory(Name alias) {
        this(alias, ANEMIA_LOGIN_HISTORY);
    }

    private AnemiaLoginHistory(Name alias, Table<AnemiaLoginHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnemiaLoginHistory(Name alias, Table<AnemiaLoginHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AnemiaLoginHistory(Table<O> child, ForeignKey<O, AnemiaLoginHistoryRecord> key) {
        super(child, key, ANEMIA_LOGIN_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANEMIA_LOGIN_HISTORY_PKEY);
    }

    @Override
    public Identity<AnemiaLoginHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANEMIA_LOGIN_HISTORY;
    }

    @Override
    public UniqueKey<AnemiaLoginHistoryRecord> getPrimaryKey() {
        return Keys.ANEMIA_LOGIN_HISTORY_PKEY;
    }

    @Override
    public List<UniqueKey<AnemiaLoginHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<AnemiaLoginHistoryRecord>>asList(Keys.ANEMIA_LOGIN_HISTORY_PKEY);
    }

    @Override
    public List<ForeignKey<AnemiaLoginHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnemiaLoginHistoryRecord, ?>>asList(Keys.ANEMIA_LOGIN_HISTORY__ANEMIA_LOGIN_HISTORY_ACCOUNT_FKEY);
    }

    public AnemiaAccount anemiaAccount() {
        return new AnemiaAccount(this, Keys.ANEMIA_LOGIN_HISTORY__ANEMIA_LOGIN_HISTORY_ACCOUNT_FKEY);
    }

    @Override
    public AnemiaLoginHistory as(String alias) {
        return new AnemiaLoginHistory(DSL.name(alias), this);
    }

    @Override
    public AnemiaLoginHistory as(Name alias) {
        return new AnemiaLoginHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnemiaLoginHistory rename(String name) {
        return new AnemiaLoginHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnemiaLoginHistory rename(Name name) {
        return new AnemiaLoginHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Timestamp, Timestamp, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
